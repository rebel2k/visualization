{
  "annotations": {
    "list": [
      {
        "builtIn": 1,
        "datasource": "-- Grafana --",
        "enable": true,
        "hide": true,
        "iconColor": "rgba(0, 211, 255, 1)",
        "name": "Annotations & Alerts",
        "target": {
          "limit": 100,
          "matchAny": false,
          "tags": [],
          "type": "dashboard"
        },
        "type": "dashboard"
      }
    ]
  },
  "description": "v.4.4.6",
  "editable": true,
  "fiscalYearStartMonth": 0,
  "graphTooltip": 1,
  "id": 47,
  "iteration": 1653667097754,
  "links": [],
  "liveNow": false,
  "panels": [
    {
      "datasource": "Turbo Timescale",
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "rgb(181, 255, 82)",
                "value": null
              },
              {
                "color": "rgb(250, 59, 20)",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 3,
        "w": 24,
        "x": 0,
        "y": 0
      },
      "id": 43,
      "options": {
        "colorMode": "background",
        "graphMode": "none",
        "justifyMode": "auto",
        "orientation": "auto",
        "reduceOptions": {
          "calcs": [
            "mean"
          ],
          "fields": "",
          "values": false
        },
        "text": {},
        "textMode": "auto"
      },
      "pluginVersion": "8.3.2",
      "targets": [
        {
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "-- ! Old Quick Subract Query\n\n/*\nselect \n    count(distinct entity_oid) filter (where date_trunc('day', time) = date_trunc('day', $__timeFrom()::date)) as \"Previous Host Count\", count(distinct entity_oid) filter (where date_trunc('day', time) = date_trunc('day', $__timeTo()::date)) as \"Current Host Count\",\n    count(distinct entity_oid) filter (where date_trunc('day', time) = date_trunc('day', $__timeFrom()::date)) - count(distinct entity_oid) filter (where date_trunc('day', time) = date_trunc('day', $__timeTo()::date)) as \"Deleted Host Count\"\nfrom metric\njoin scope_to($__timeFrom(), $__timeTo(), 'PHYSICAL_MACHINE', ARRAY[$Cluster]::bigint[], false) s on s.oid = metric.entity_oid\n  where $__timeFilter(time)\n  AND entity_type = 'PHYSICAL_MACHINE'\n  AND time BETWEEN s.from_time AND s.to_time\n  AND type = 'STORAGE_AMOUNT'  */\n  \n  with monthly_Hosts as (\n    select date_trunc('hour', time) as current\n          ,entity_oid as hosts_oid\n      FROM (\n        select time\n              ,entity_oid\n          from extractor.metric\n         join scope s on s.scoped_oid = entity_oid\n         WHERE entity_type = 'PHYSICAL_MACHINE'\n           AND seed_oid in ($Cluster)\n           AND (start,finish) overlaps ($__timeFrom(), $__timeTo())\n           AND type = 'CPU'\n           AND $__timeFilter(time)\n      ) as metric_data\n     GROUP BY 1, 2\n),\nadded_and_removed as (\n    SELECT COUNT(DISTINCT hosts_oid) FILTER (where current = (select max(current) from monthly_Hosts)) as \"Hosts Total Count\",\n           COUNT(DISTINCT hosts_oid) FILTER (WHERE hosts_oid NOT IN (SELECT DISTINCT hosts_oid\n                                                                 FROM monthly_Hosts m2\n                                                               WHERE m2.current = (select min(current) from monthly_Hosts))) as \"Hosts Added\"\n          ,COUNT(DISTINCT hosts_oid) FILTER (WHERE hosts_oid NOT IN (SELECT DISTINCT hosts_oid\n                                                                 FROM monthly_Hosts m2\n                                                                WHERE m2.current = (select max(current) from monthly_Hosts))) as \"Hosts Removed\"\n      FROM monthly_Hosts m1\n)\nselect * from added_and_removed\n",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "savings"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "completed_action",
          "timeColumn": "recommendation_time",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "title": "Scoped Host Counter (within Timescale)",
      "transformations": [
        {
          "id": "filterByRefId",
          "options": {}
        },
        {
          "id": "calculateField",
          "options": {
            "alias": "Hosts Delta",
            "binary": {
              "left": "Hosts Added",
              "operator": "-",
              "reducer": "sum",
              "right": "Hosts Removed"
            },
            "mode": "binary",
            "reduce": {
              "reducer": "sum"
            },
            "replaceFields": false
          }
        },
        {
          "id": "organize",
          "options": {
            "excludeByName": {},
            "indexByName": {
              "Host Total Count": 3,
              "Hosts Added": 0,
              "Hosts Delta": 2,
              "Hosts Removed": 1
            },
            "renameByName": {}
          }
        }
      ],
      "transparent": true,
      "type": "stat"
    },
    {
      "datasource": "Turbo Timescale",
      "fieldConfig": {
        "defaults": {
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "light-yellow",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "Available Storage"
            },
            "properties": [
              {
                "id": "unit",
                "value": "decgbytes"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Allocated Storage"
            },
            "properties": [
              {
                "id": "unit",
                "value": "decgbytes"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Total Storage"
            },
            "properties": [
              {
                "id": "unit",
                "value": "decgbytes"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Mem Capacity"
            },
            "properties": [
              {
                "id": "unit",
                "value": "decgbytes"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "vMem Provisioned"
            },
            "properties": [
              {
                "id": "unit",
                "value": "decgbytes"
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 19,
        "w": 12,
        "x": 0,
        "y": 3
      },
      "id": 18,
      "options": {
        "displayMode": "gradient",
        "orientation": "horizontal",
        "reduceOptions": {
          "calcs": [
            "mean"
          ],
          "fields": "",
          "values": false
        },
        "showUnfilled": true,
        "text": {}
      },
      "pluginVersion": "8.3.2",
      "targets": [
        {
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "with data as (\n    select entity_oid\n          ,entity_type\n          ,type\n          ,avg(current) as current\n          ,avg(capacity) as capacity\n    from metric\n    where $__timeFilter(time)\n      and type in ('MEM', 'VMEM', 'STORAGE_AMOUNT', 'STORAGE_PROVISIONED')\n      and entity_type in ('PHYSICAL_MACHINE', 'VIRTUAL_MACHINE', 'STORAGE')\n  group by 1, 2, 3\n),\n\npm_data AS (\n  SELECT m.entity_oid,\n    avg((e.attrs -> 'num_cpus')::int) AS num_cpus,\n    avg(m.capacity) AS mem\n  FROM data m,\n    scope_to($__timeFrom(), $__timeTo(), 'PHYSICAL_MACHINE', ARRAY[$Cluster]::bigint[], false) s,\n    entity e\n  WHERE m.entity_oid = s.oid\n    AND m.entity_oid = e.oid\n    AND m.type = 'MEM'\n    and m.entity_type = 'PHYSICAL_MACHINE'\n    and e.type = 'PHYSICAL_MACHINE'\n    and (first_seen, last_seen) overlaps ($__timeFrom(), $__timeTo())\n  GROUP BY 1\n),\npm_counts AS (\n  SELECT COUNT(DISTINCT entity_oid) as pm_count,\n    SUM(num_cpus) AS cpu_count,\n    SUM(mem) AS pm_mem\n  FROM pm_data\n),\nvm_data AS (\n  SELECT m.entity_oid,\n    avg((e.attrs -> 'num_cpus')::int) as num_vcpus,\n    avg(m.capacity) as vmem\n  FROM data m,\n    scope_to($__timeFrom(), $__timeTo(), 'VIRTUAL_MACHINE', ARRAY[$Cluster]::bigint[], false) s,\n    entity e\n  WHERE m.entity_oid = s.oid\n    AND m.entity_oid = e.oid\n    AND m.type = 'VMEM'\n    and m.entity_type = 'VIRTUAL_MACHINE'\n    and e.type = 'VIRTUAL_MACHINE'\n    and (first_seen, last_seen) overlaps ($__timeFrom(), $__timeTo())\n  GROUP BY 1\n),\n\n\n-- AND (first_seen, last_seen) overlaps ($__timeFrom(), $__timeTo())\n-- AND time BETWEEN s.from_time AND s.to_time\n-- scope_to($__timeFrom(), $__timeTo(), 'STORAGE', ARRAY[$Cluster]::bigint[], false) s\n-- (10, 4)  (12 ,2)\n\n\nvm_counts AS (\n  SELECT COUNT(DISTINCT entity_oid) AS vm_count,\n    SUM(num_vcpus) AS vcpu_count,\n    SUM(vmem) AS vm_vmem\n  FROM vm_data\n),\nstg_data AS (\n  SELECT m.entity_oid,\n    max(current) FILTER (WHERE m.type = 'STORAGE_AMOUNT') AS stg_used,\n    max(capacity) FILTER (WHERE m.type = 'STORAGE_AMOUNT') AS stg_cap,\n    max(current) FILTER (WHERE m.type = 'STORAGE_PROVISIONED') AS stg_prov\n  FROM data m,\n    scope_to($__timeFrom(), $__timeTo(), 'STORAGE', ARRAY[$Cluster]::bigint[], false) s\n  WHERE m.entity_oid = s.oid\n    AND m.type IN ('STORAGE_AMOUNT', 'STORAGE_PROVISIONED')\n    and m.entity_type = 'STORAGE'\n  GROUP BY 1\n),\nstg_stats AS (\n  SELECT sum(stg_used) AS stg_used,\n    sum(stg_cap) AS stg_cap,\n    sum(stg_prov) AS stg_prov\n  FROM stg_data\n)\nSELECT\n  vm_count AS \"Virtual Machines\"\n  ,pm_count AS \"Physical Hosts\"\n  ,cpu_count AS \"CPUs Available\"\n  ,vcpu_count AS \"vCPUs Provisioned\"\n  ,pm_mem / 1024 / 1024 AS \"Mem Capacity\"\n  ,vm_vmem / 1024 / 1024 AS \"vMem Provisioned\"\n  ,(stg_cap - stg_used)/ 1024 AS \"Available Storage\"\n  ,stg_prov / 1024 AS \"Allocated Storage\"\n  ,stg_cap / 1024 AS \"Total Storage\"  \nFROM pm_counts, vm_counts, stg_stats",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "savings"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "completed_action",
          "timeColumn": "recommendation_time",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "title": "Scoped Datacenter / Cluster Compute and Storage Statistics",
      "transformations": [],
      "type": "bargauge"
    },
    {
      "datasource": "Turbo Timescale",
      "fieldConfig": {
        "defaults": {
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "orange",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "Mem Avg Used"
            },
            "properties": [
              {
                "id": "unit",
                "value": "decgbytes"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Mem Max Used"
            },
            "properties": [
              {
                "id": "unit",
                "value": "decgbytes"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Mem Capacity"
            },
            "properties": [
              {
                "id": "unit",
                "value": "decgbytes"
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 17,
        "w": 12,
        "x": 12,
        "y": 3
      },
      "id": 24,
      "options": {
        "displayMode": "gradient",
        "orientation": "horizontal",
        "reduceOptions": {
          "calcs": [
            "mean"
          ],
          "fields": "",
          "values": false
        },
        "showUnfilled": true,
        "text": {}
      },
      "pluginVersion": "8.3.2",
      "targets": [
        {
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "-- Datacenter Stats Panel\nwith pms_by_cluster as (\n    SELECT DISTINCT ON (e.oid)\n        g.name as cluster_name,\n        g.oid as cluster_oid,\n        e.oid as pm_oid\n      FROM entity e\n      JOIN scope s1 ON (s1.seed_oid = e.oid)\n      JOIN entity g ON (g.oid = s1.scoped_oid)\n     WHERE e.type = 'PHYSICAL_MACHINE'\n       AND (s1.scoped_type = 'COMPUTE_CLUSTER')\n       AND (s1.scoped_oid in ($Cluster))\n       AND (e.first_seen, e.last_seen) OVERLAPS ($__timeFrom(), $__timeTo())\n       AND (s1.start, s1.finish) OVERLAPS ($__timeFrom(), $__timeTo())\n),\n\ncluster_stats as (\n    select cluster_name\n          ,avg(cpu_used) as cpu_used_avg\n          ,max(cpu_used) as cpu_used_max\n          ,percentile_cont(.97) within group (order by cpu_used/cpu_capacity asc) cpu_util_percentile\n          ,avg(cpu_used/cpu_capacity) as cpu_util_avg\n          ,max(cpu_used/cpu_capacity) as cpu_util_max\n          ,avg(cpu_capacity) as cpu_capacity \n          ,avg(mem_used) as mem_used_avg\n          ,max(mem_used) as mem_used_max\n          ,percentile_cont(.97) within group (order by mem_used/mem_capacity asc) mem_util_percentile\n          ,avg(mem_used/mem_capacity) as mem_util_avg\n          ,max(mem_used/mem_capacity) as mem_util_max\n          ,avg(mem_capacity) as mem_capacity\n    from\n        (SELECT cluster_oid\n                ,cluster_name\n                ,time\n               ,sum(current) FILTER (where type = 'CPU') as cpu_used\n               ,sum(capacity)  FILTER (where type = 'CPU') as cpu_capacity\n               ,sum(current) FILTER (where type = 'MEM') as mem_used\n               ,sum(capacity)  FILTER (where type = 'MEM') as mem_capacity\n          FROM metric\n          JOIN pms_by_cluster on pms_by_cluster.pm_oid = metric.entity_oid\n         WHERE type in ('CPU', 'MEM')\n           AND $__timeFilter(time)\n           AND consumed is null\n         GROUP BY 1,2,3) as cluster_stats\n         group by 1\n)\n\nselect SPLIT_PART(cluster_name, '/', 1) as \"Datacenter\",\n       SPLIT_PART(cluster_name, '/', 2) as \"Cluster Name\",\n       cpu_used_avg/1000 as \"CPU Avg Used (GHz)\",\n       cpu_used_max/1000 as \"CPU Max Used (GHz)\",\n       cpu_capacity/1000 as \"CPU Capacity (GHz)\",\n       mem_used_avg/1024/1024 as \"Mem Avg Used\",\n       mem_used_max/1024/1024 as \"Mem Max Used\",\n       mem_capacity/1024/1024 as \"Mem Capacity\"\n  from cluster_stats\n  ;",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "savings"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "completed_action",
          "timeColumn": "recommendation_time",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "title": "Global Cluster Compute Utilization Stats",
      "type": "bargauge"
    },
    {
      "datasource": "Turbo Timescale",
      "fieldConfig": {
        "defaults": {
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "semi-dark-purple",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "Mem Avg Used (GB)"
            },
            "properties": [
              {
                "id": "unit",
                "value": "decgbytes"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Mem Avg Used"
            },
            "properties": [
              {
                "id": "links"
              },
              {
                "id": "unit",
                "value": "decgbytes"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Mem Avg Used"
            },
            "properties": [
              {
                "id": "unit",
                "value": "decgbytes"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Mem Max Used"
            },
            "properties": [
              {
                "id": "unit",
                "value": "decgbytes"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Mem Capacity"
            },
            "properties": [
              {
                "id": "unit",
                "value": "decgbytes"
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 17,
        "w": 12,
        "x": 12,
        "y": 20
      },
      "id": 38,
      "options": {
        "displayMode": "gradient",
        "orientation": "horizontal",
        "reduceOptions": {
          "calcs": [
            "max"
          ],
          "fields": "",
          "values": false
        },
        "showUnfilled": true,
        "text": {}
      },
      "pluginVersion": "8.3.2",
      "targets": [
        {
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "-- Datacenter Stats Panel\nwith pms_by_cluster as (\n    SELECT DISTINCT ON (e.oid)\n        g.name as cluster_name,\n        g.oid as cluster_oid,\n        e.oid as pm_oid\n      FROM entity e\n      JOIN scope s1 ON (s1.seed_oid = e.oid)\n      JOIN entity g ON (g.oid = s1.scoped_oid)\n     WHERE e.type = 'PHYSICAL_MACHINE'\n       AND (s1.scoped_type = 'COMPUTE_CLUSTER')\n       AND (e.first_seen, e.last_seen) OVERLAPS ($__timeFrom(), $__timeTo())\n       AND (s1.start, s1.finish) OVERLAPS ($__timeFrom(), $__timeTo())\n),\n\ncluster_stats as (\n    select cluster_name\n          ,avg(cpu_used) as cpu_used_avg\n          ,max(cpu_used) as cpu_used_max\n          ,percentile_cont(.97) within group (order by cpu_used/cpu_capacity asc) cpu_util_percentile\n          ,avg(cpu_used/cpu_capacity) as cpu_util_avg\n          ,max(cpu_used/cpu_capacity) as cpu_util_max\n          ,avg(cpu_capacity) as cpu_capacity \n          ,avg(mem_used) as mem_used_avg\n          ,max(mem_used) as mem_used_max\n          ,percentile_cont(.97) within group (order by mem_used/mem_capacity asc) mem_util_percentile\n          ,avg(mem_used/mem_capacity) as mem_util_avg\n          ,max(mem_used/mem_capacity) as mem_util_max\n          ,avg(mem_capacity) as mem_capacity\n    from\n        (SELECT cluster_oid\n                ,cluster_name\n                ,time\n               ,sum(current) FILTER (where type = 'CPU') as cpu_used\n               ,sum(capacity)  FILTER (where type = 'CPU') as cpu_capacity\n               ,sum(current) FILTER (where type = 'MEM') as mem_used\n               ,sum(capacity)  FILTER (where type = 'MEM') as mem_capacity\n          FROM metric\n          JOIN pms_by_cluster on pms_by_cluster.pm_oid = metric.entity_oid\n         WHERE type in ('CPU', 'MEM')\n           AND $__timeFilter(time)\n           AND consumed is null\n         GROUP BY 1,2,3) as cluster_stats\n         group by 1\n)\n\nselect SPLIT_PART(cluster_name, '/', 1) as \"Datacenter\",\n       SPLIT_PART(cluster_name, '/', 2) as \"Cluster Name\",\n       cpu_used_avg/1000 as \"CPU Avg Used (GHz)\",\n       cpu_used_max/1000 as \"CPU Max Used (GHz)\",\n       cpu_capacity/1000 as \"CPU Capacity (GHz)\",\n       mem_used_avg/1024/1024 as \"Mem Avg Used\",\n       mem_used_max/1024/1024 as \"Mem Max Used\",\n       mem_capacity/1024/1024 as \"Mem Capacity\"\n  from cluster_stats\n  ;\n\n\n-- Host Stats Panel\nwith pms_by_cluster as (\n    SELECT DISTINCT ON (e.oid)\n        g.name as cluster_name,\n        g.oid as cluster_oid,\n        e.oid as pm_oid,\n        e.name as pm_name\n      FROM entity e\n      JOIN scope s1 ON (s1.seed_oid = e.oid)\n      JOIN entity g ON (g.oid = s1.scoped_oid)\n     WHERE e.type = 'PHYSICAL_MACHINE'\n       AND (s1.scoped_type = 'COMPUTE_CLUSTER')\n       AND (e.first_seen, e.last_seen) OVERLAPS ($__timeFrom(), $__timeTo())\n       AND (s1.start, s1.finish) OVERLAPS ($__timeFrom(), $__timeTo())\n),\n\npm_stats as (\n     select pm_oid\n          ,avg(cpu_used) as cpu_used_avg\n          ,max(cpu_used) as cpu_used_max\n          ,percentile_cont(.97) within group (order by cpu_used/cpu_capacity asc) cpu_util_percentile\n          ,avg(cpu_used/cpu_capacity) as cpu_util_avg\n          ,max(cpu_used/cpu_capacity) as cpu_util_max\n          ,avg(cpu_capacity) as cpu_capacity \n          ,avg(mem_used) as mem_used_avg\n          ,max(mem_used) as mem_used_max\n          ,percentile_cont(.97) within group (order by mem_used/mem_capacity asc) mem_util_percentile\n          ,avg(mem_used/mem_capacity) as mem_util_avg\n          ,max(mem_used/mem_capacity) as mem_util_max\n          ,avg(mem_capacity) as mem_capacity\n    from\n        (SELECT entity_oid as pm_oid\n               ,time\n               ,max(current) FILTER (where type = 'CPU') as cpu_used\n               ,max(capacity)  FILTER (where type = 'CPU') as cpu_capacity\n               ,max(current) FILTER (where type = 'MEM') as mem_used\n               ,max(capacity)  FILTER (where type = 'MEM') as mem_capacity\n          FROM metric\n         WHERE type in ('CPU', 'MEM')\n           AND $__timeFilter(time)\n           AND consumed is null\n           and entity_type = 'PHYSICAL_MACHINE'\n         GROUP BY 1,2) as cluster_stats\n    group by 1\n)\n\nselect SPLIT_PART(cluster_name, '/', 1) as \"Datacenter\",\n       SPLIT_PART(cluster_name, '/', 2) as \"Cluster Name\",\n       pm_name as \"Host Name\",\n       cpu_capacity as \"CPU Capacity (MHz)\",\n       cpu_used_avg as \"CPU Avg Used (MHz)\",\n       cpu_used_max as \"CPU Max Used (MHz)\",\n       mem_capacity/1024/1024 as \"Mem Capacity\",\n       mem_used_avg/1024/1024 as \"Mem Avg Used\",\n       mem_used_max/1024/1024 as \"Mem Max Used\"\n  from pm_stats\n  JOIN pms_by_cluster on pms_by_cluster.pm_oid = pm_stats.pm_oid\n;",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "savings"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "completed_action",
          "timeColumn": "recommendation_time",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "title": "Cluster Compute Utilization Peak Utilization",
      "type": "bargauge"
    },
    {
      "datasource": "Turbo Timescale",
      "fieldConfig": {
        "defaults": {
          "mappings": [],
          "max": 100,
          "thresholds": {
            "mode": "percentage",
            "steps": [
              {
                "color": "light-purple",
                "value": null
              },
              {
                "color": "rgb(252, 65, 243)",
                "value": 88
              }
            ]
          }
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "Storage Latency Peak"
            },
            "properties": [
              {
                "id": "unit",
                "value": "ms"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Iops Peak"
            },
            "properties": [
              {
                "id": "unit",
                "value": "iops"
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 7,
        "w": 12,
        "x": 0,
        "y": 22
      },
      "id": 39,
      "options": {
        "orientation": "vertical",
        "reduceOptions": {
          "calcs": [
            "max"
          ],
          "fields": "",
          "values": false
        },
        "showThresholdLabels": false,
        "showThresholdMarkers": true,
        "text": {}
      },
      "pluginVersion": "8.3.2",
      "targets": [
        {
          "format": "table",
          "group": [],
          "hide": false,
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "-- Datacenter Stats Panel\nwith pms_by_cluster as (\n    SELECT DISTINCT ON (e.oid)\n        g.name as cluster_name,\n        g.oid as cluster_oid,\n        e.oid as pm_oid\n      FROM entity e\n      JOIN scope s1 ON (s1.seed_oid = e.oid)\n      JOIN entity g ON (g.oid = s1.scoped_oid)\n     WHERE e.type = 'PHYSICAL_MACHINE'\n       AND (s1.scoped_type = 'COMPUTE_CLUSTER')\n       AND (s1.scoped_oid in ($Cluster))\n       AND (e.first_seen, e.last_seen) OVERLAPS ($__timeFrom(), $__timeTo())\n       AND (s1.start, s1.finish) OVERLAPS ($__timeFrom(), $__timeTo())\n),\n\ncluster_stats as (\n    select cluster_name\n          ,avg(cpu_used) as cpu_used_avg\n          ,max(cpu_used) as cpu_used_max\n          ,percentile_cont(.97) within group (order by cpu_used/cpu_capacity asc) cpu_util_percentile\n          ,avg(cpu_used/cpu_capacity) as cpu_util_avg\n          ,max(cpu_used/cpu_capacity) as cpu_util_max\n          ,avg(cpu_capacity) as cpu_capacity \n          ,avg(mem_used) as mem_used_avg\n          ,max(mem_used) as mem_used_max\n          ,percentile_cont(.97) within group (order by mem_used/mem_capacity asc) mem_util_percentile\n          ,avg(mem_used/mem_capacity) as mem_util_avg\n          ,max(mem_used/mem_capacity) as mem_util_max\n          ,avg(mem_capacity) as mem_capacity\n    from\n        (SELECT cluster_oid\n                ,cluster_name\n                ,time\n               ,sum(current) FILTER (where type = 'CPU') as cpu_used\n               ,sum(capacity)  FILTER (where type = 'CPU') as cpu_capacity\n               ,sum(current) FILTER (where type = 'MEM') as mem_used\n               ,sum(capacity)  FILTER (where type = 'MEM') as mem_capacity\n          FROM metric\n          JOIN pms_by_cluster on pms_by_cluster.pm_oid = metric.entity_oid\n         WHERE type in ('CPU', 'MEM')\n           AND $__timeFilter(time)\n           AND consumed is null\n         GROUP BY 1,2,3) as cluster_stats\n         group by 1\n)\n\nselect SPLIT_PART(cluster_name, '/', 1) as \"Datacenter\",\n       SPLIT_PART(cluster_name, '/', 2) as \"Cluster Name\",\n       cpu_util_max*100 as \"CPU Max Util (%)\",\n       mem_util_max*100 as \"Mem Max Util (%)\"\n\n  from cluster_stats\n  ;",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "savings"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "completed_action",
          "timeColumn": "recommendation_time",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        },
        {
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "\n-- Datastore Stats Panel\nwith ds_by_cluster as (\n    SELECT DISTINCT ON (e.oid)\n        g.name as cluster_name,\n        g.oid as cluster_oid,\n        e.oid as ds_oid,\n        e.name as ds_name\n      FROM entity e\n      JOIN scope s1 ON (s1.seed_oid = e.oid)\n      JOIN entity g ON (g.oid = s1.scoped_oid)\n     WHERE e.type = 'STORAGE'\n       AND (s1.scoped_type = 'COMPUTE_CLUSTER')\n       AND (s1.scoped_oid in ($Cluster))\n       AND (e.first_seen, e.last_seen) OVERLAPS ($__timeFrom(), $__timeTo())\n       AND (s1.start, s1.finish) OVERLAPS ($__timeFrom(), $__timeTo())\n),\n\nds_stats as (\n     select ds_oid\n          ,max(iops_used) as iops_max\n          ,max(latency_used) as latency_max\n    from\n        (SELECT entity_oid as ds_oid\n               ,time\n               ,max(current) FILTER (where type = 'STORAGE_LATENCY') as latency_used\n               ,max(current) FILTER (where type = 'STORAGE_ACCESS') as iops_used\n          FROM metric\n         WHERE type in ('STORAGE_LATENCY', 'STORAGE_ACCESS')\n           AND $__timeFilter(time)\n           AND consumed is null\n           and entity_type = 'STORAGE'\n         GROUP BY 1,2) as cluster_stats\n    group by 1\n)\n\n\n-- TODO: Update all of the column names below with the new names above\n\n\nselect SPLIT_PART(cluster_name, '/', 1) as \"Datacenter\",\n       SPLIT_PART(cluster_name, '/', 2) as \"Cluster Name\",\n       ds_name as \"Datastore Name\",\n       latency_max as \"Storage Latency Peak\",\n       iops_max as \"Iops Peak\"\n  from ds_stats\n  join ds_by_cluster on ds_stats.ds_oid = ds_by_cluster.ds_oid\n;\n",
          "refId": "B",
          "select": [
            [
              {
                "params": [
                  "savings"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "completed_action",
          "timeColumn": "recommendation_time",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "title": "Datacenter Cluster Compute Utilization Peak (Percentile)",
      "type": "gauge"
    },
    {
      "datasource": "Turbo Timescale",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [],
          "max": 100,
          "thresholds": {
            "mode": "percentage",
            "steps": [
              {
                "color": "rgb(255, 95, 237)",
                "value": null
              },
              {
                "color": "red",
                "value": 88
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 7,
        "w": 12,
        "x": 0,
        "y": 29
      },
      "id": 6,
      "options": {
        "orientation": "vertical",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "showThresholdLabels": false,
        "showThresholdMarkers": true,
        "text": {}
      },
      "pluginVersion": "8.3.2",
      "targets": [
        {
          "format": "table",
          "group": [],
          "hide": false,
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "-- Datacenter Stats Panel\nwith pms_by_cluster as (\n    SELECT DISTINCT ON (e.oid)\n        g.name as cluster_name,\n        g.oid as cluster_oid,\n        e.oid as pm_oid\n      FROM entity e\n      JOIN scope s1 ON (s1.seed_oid = e.oid)\n      JOIN entity g ON (g.oid = s1.scoped_oid)\n     WHERE e.type = 'PHYSICAL_MACHINE'\n       AND (s1.scoped_type = 'COMPUTE_CLUSTER')\n       AND (s1.scoped_oid in ($Cluster))\n       AND (e.first_seen, e.last_seen) OVERLAPS ($__timeFrom(), $__timeTo())\n       AND (s1.start, s1.finish) OVERLAPS ($__timeFrom(), $__timeTo())\n),\n\ncluster_stats as (\n    select cluster_name\n          ,avg(cpu_used) as cpu_used_avg\n          ,max(cpu_used) as cpu_used_max\n          ,percentile_cont(.97) within group (order by cpu_used/cpu_capacity asc) cpu_util_percentile\n          ,avg(cpu_used/cpu_capacity) as cpu_util_avg\n          ,max(cpu_used/cpu_capacity) as cpu_util_max\n          ,avg(cpu_capacity) as cpu_capacity \n          ,avg(mem_used) as mem_used_avg\n          ,max(mem_used) as mem_used_max\n          ,percentile_cont(.97) within group (order by mem_used/mem_capacity asc) mem_util_percentile\n          ,avg(mem_used/mem_capacity) as mem_util_avg\n          ,max(mem_used/mem_capacity) as mem_util_max\n          ,avg(mem_capacity) as mem_capacity\n    from\n        (SELECT cluster_oid\n                ,cluster_name\n                ,time\n               ,sum(current) FILTER (where type = 'CPU') as cpu_used\n               ,sum(capacity)  FILTER (where type = 'CPU') as cpu_capacity\n               ,sum(current) FILTER (where type = 'MEM') as mem_used\n               ,sum(capacity)  FILTER (where type = 'MEM') as mem_capacity\n          FROM metric\n          JOIN pms_by_cluster on pms_by_cluster.pm_oid = metric.entity_oid\n         WHERE type in ('CPU', 'MEM')\n           AND $__timeFilter(time)\n           AND consumed is null\n         GROUP BY 1,2,3) as cluster_stats\n         group by 1\n)\n\nselect SPLIT_PART(cluster_name, '/', 1) as \"Datacenter\",\n       SPLIT_PART(cluster_name, '/', 2) as \"Cluster Name\",\n       cpu_util_avg*100 as \"CPU Avg Util (%)\",\n       cpu_util_max*100 as \"CPU Max Util (%)\",\n       cpu_util_percentile*100 as \"CPU Percentile Util (%)\",\n       mem_util_avg*100 as \"Mem Avg Util (%)\",\n       mem_util_max*100 as \"Mem Max Util (%)\",\n       mem_util_percentile*100 as \"Mem Percentile Util (%)\"\n\n  from cluster_stats\n  ;",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "savings"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "completed_action",
          "timeColumn": "recommendation_time",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "title": "Datacenter Cluster Compute Utilization Last Discovered",
      "type": "gauge"
    },
    {
      "datasource": "Turbo Timescale",
      "fieldConfig": {
        "defaults": {
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "rgb(151, 255, 0)",
                "value": null
              },
              {
                "color": "#EAB839",
                "value": 75
              },
              {
                "color": "rgb(255, 115, 0)",
                "value": 90
              }
            ]
          }
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "CPU Capacity (MHz)"
            },
            "properties": [
              {
                "id": "noValue",
                "value": "GHZ"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Mem Capacity"
            },
            "properties": [
              {
                "id": "unit",
                "value": "decgbytes"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Mem Avg Used"
            },
            "properties": [
              {
                "id": "unit",
                "value": "decgbytes"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Mem Max Used"
            },
            "properties": [
              {
                "id": "unit",
                "value": "decgbytes"
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 17,
        "w": 12,
        "x": 0,
        "y": 36
      },
      "id": 28,
      "options": {
        "displayMode": "gradient",
        "orientation": "horizontal",
        "reduceOptions": {
          "calcs": [
            "last"
          ],
          "fields": "",
          "values": false
        },
        "showUnfilled": true,
        "text": {}
      },
      "pluginVersion": "8.3.2",
      "targets": [
        {
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "\n-- Host Stats Panel\nwith pms_by_cluster as (\n    SELECT DISTINCT ON (e.oid)\n        g.name as cluster_name,\n        g.oid as cluster_oid,\n        e.oid as pm_oid,\n        e.name as pm_name\n      FROM entity e\n      JOIN scope s1 ON (s1.seed_oid = e.oid)\n      JOIN entity g ON (g.oid = s1.scoped_oid)\n     WHERE e.type = 'PHYSICAL_MACHINE'\n       AND (s1.scoped_type = 'COMPUTE_CLUSTER')\n       AND (s1.scoped_oid in ($Cluster))\n       AND (e.first_seen, e.last_seen) OVERLAPS ($__timeFrom(), $__timeTo())\n       AND (s1.start, s1.finish) OVERLAPS ($__timeFrom(), $__timeTo())\n),\n\npm_stats as (\n     select pm_oid\n          ,avg(cpu_used) as cpu_used_avg\n          ,max(cpu_used) as cpu_used_max\n          ,percentile_cont(.97) within group (order by cpu_used/cpu_capacity asc) cpu_util_percentile\n          ,avg(cpu_used/cpu_capacity) as cpu_util_avg\n          ,max(cpu_used/cpu_capacity) as cpu_util_max\n          ,avg(cpu_capacity) as cpu_capacity \n          ,avg(mem_used) as mem_used_avg\n          ,max(mem_used) as mem_used_max\n          ,percentile_cont(.97) within group (order by mem_used/mem_capacity asc) mem_util_percentile\n          ,avg(mem_used/mem_capacity) as mem_util_avg\n          ,max(mem_used/mem_capacity) as mem_util_max\n          ,avg(mem_capacity) as mem_capacity\n    from\n        (SELECT entity_oid as pm_oid\n               ,time\n               ,max(current) FILTER (where type = 'CPU') as cpu_used\n               ,max(capacity)  FILTER (where type = 'CPU') as cpu_capacity\n               ,max(current) FILTER (where type = 'MEM') as mem_used\n               ,max(capacity)  FILTER (where type = 'MEM') as mem_capacity\n          FROM metric\n         WHERE type in ('CPU', 'MEM')\n           AND $__timeFilter(time)\n           AND consumed is null\n           and entity_type = 'PHYSICAL_MACHINE'\n         GROUP BY 1,2) as cluster_stats\n    group by 1\n)\n\nselect SPLIT_PART(cluster_name, '/', 1) as \"Datacenter\",\n       SPLIT_PART(cluster_name, '/', 2) as \"Cluster Name\",\n       pm_name as \"Host Name\",\n       cpu_capacity as \"CPU Capacity (MHz)\",\n       cpu_used_avg as \"CPU Avg Used (MHz)\",\n       cpu_used_max as \"CPU Max Used (MHz)\",\n       mem_capacity/1024/1024 as \"Mem Capacity\",\n       mem_used_avg/1024/1024 as \"Mem Avg Used\",\n       mem_used_max/1024/1024 as \"Mem Max Used\",\n       cpu_util_avg*100 as \"CPU Avg Util (%)\",\n       cpu_util_max*100 as \"CPU Max Util (%)\",\n       cpu_util_percentile*100 as \"CPU Percentile Util (%)\",\n       mem_util_avg*100 as \"Mem Avg Util (%)\",\n       mem_util_max*100 as \"Mem Max Util (%)\",\n       mem_util_percentile*100 as \"Mem Percentile Util (%)\"\n  from pm_stats\n  JOIN pms_by_cluster on pms_by_cluster.pm_oid = pm_stats.pm_oid\n;",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "savings"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "completed_action",
          "timeColumn": "recommendation_time",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "title": "Datacenter and Cluster (Compute) Current Stats",
      "type": "bargauge"
    },
    {
      "aliasColors": {},
      "bars": false,
      "dashLength": 10,
      "dashes": false,
      "datasource": "Turbo Timescale",
      "fill": 4,
      "fillGradient": 6,
      "gridPos": {
        "h": 16,
        "w": 12,
        "x": 12,
        "y": 37
      },
      "hiddenSeries": false,
      "id": 30,
      "legend": {
        "avg": false,
        "current": false,
        "max": false,
        "min": false,
        "show": true,
        "total": false,
        "values": false
      },
      "lines": true,
      "linewidth": 2,
      "nullPointMode": "null",
      "options": {
        "alertThreshold": true
      },
      "percentage": false,
      "pluginVersion": "8.3.2",
      "pointradius": 1,
      "points": true,
      "renderer": "flot",
      "seriesOverrides": [],
      "spaceLength": 10,
      "stack": false,
      "steppedLine": false,
      "targets": [
        {
          "format": "time_series",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "WITH metrics AS (\n  SELECT m.time, m.current, m.type\n  FROM metric m,\n    scope_to($__timeFrom(), $__timeTo(), 'STORAGE', ARRAY[${Cluster:raw}+0]::bigint[], '${Cluster:raw}' = '0') as s\n  WHERE\n    m.entity_oid = s.oid\n    AND m.time BETWEEN s.from_time AND s.to_time\n    AND m.type IN ('STORAGE_ACCESS', 'STORAGE_LATENCY')\n    AND \"time\" BETWEEN $__timeFrom() AND $__timeTo()\n  GROUP BY m.time, m.entity_oid, m.current, m.type\n)\nSELECT\n  m.time,\n  avg(m.current) FILTER (WHERE m.type = 'STORAGE_ACCESS') AS \"IOPS Avg\",\n  avg(m.current) FILTER (WHERE m.type = 'STORAGE_LATENCY') AS \"Latency Avg\"\nFROM metrics m\nGROUP BY m.time\nORDER BY 1",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "savings"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "completed_action",
          "timeColumn": "recommendation_time",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "thresholds": [],
      "timeRegions": [],
      "title": "Storage Access Performance",
      "tooltip": {
        "shared": true,
        "sort": 0,
        "value_type": "individual"
      },
      "type": "graph",
      "xaxis": {
        "mode": "time",
        "show": true,
        "values": []
      },
      "yaxes": [
        {
          "$$hashKey": "object:776",
          "format": "iops",
          "logBase": 2,
          "show": true
        },
        {
          "$$hashKey": "object:777",
          "format": "short",
          "logBase": 1,
          "show": true
        }
      ],
      "yaxis": {
        "align": false
      }
    },
    {
      "datasource": "Turbo Timescale",
      "fieldConfig": {
        "defaults": {
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "light-blue",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "Storage Capacity"
            },
            "properties": [
              {
                "id": "unit",
                "value": "decgbytes"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Storage Provisioned"
            },
            "properties": [
              {
                "id": "unit",
                "value": "decgbytes"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Storage Used "
            },
            "properties": [
              {
                "id": "unit",
                "value": "decgbytes"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Storage Latency Used"
            },
            "properties": [
              {
                "id": "unit",
                "value": "ms"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Storage Latency Peak"
            },
            "properties": [
              {
                "id": "unit",
                "value": "ms"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Iops Used"
            },
            "properties": [
              {
                "id": "unit",
                "value": "iops"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Iops Peak"
            },
            "properties": [
              {
                "id": "unit",
                "value": "iops"
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 18,
        "w": 12,
        "x": 0,
        "y": 53
      },
      "id": 22,
      "options": {
        "displayMode": "gradient",
        "orientation": "horizontal",
        "reduceOptions": {
          "calcs": [
            "mean"
          ],
          "fields": "",
          "values": false
        },
        "showUnfilled": true,
        "text": {}
      },
      "pluginVersion": "8.3.2",
      "targets": [
        {
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "\n-- Datastore Stats Panel\nwith ds_by_cluster as (\n    SELECT DISTINCT ON (e.oid)\n        g.name as cluster_name,\n        g.oid as cluster_oid,\n        e.oid as ds_oid,\n        e.name as ds_name\n      FROM entity e\n      JOIN scope s1 ON (s1.seed_oid = e.oid)\n      JOIN entity g ON (g.oid = s1.scoped_oid)\n     WHERE e.type = 'STORAGE'\n       AND (s1.scoped_type = 'COMPUTE_CLUSTER')\n       AND (s1.scoped_oid in ($Cluster))\n       AND (e.first_seen, e.last_seen) OVERLAPS ($__timeFrom(), $__timeTo())\n       AND (s1.start, s1.finish) OVERLAPS ($__timeFrom(), $__timeTo())\n),\n\nds_stats as (\n     select ds_oid\n          ,avg(stor_used) as stor_used\n          ,avg(stor_used/stor_capacity) as stor_util\n          ,avg(stor_capacity) as stor_capacity\n          ,avg(stor_provisioned) as stor_provisioned\n          ,avg(iops_used) as iops_avg\n          ,max(iops_used) as iops_max\n          ,avg(latency_used) as latency_avg\n          ,max(latency_used) as latency_max\n    from\n        (SELECT entity_oid as ds_oid\n               ,time\n               ,max(current) FILTER (where type = 'STORAGE_AMOUNT') as stor_used\n               ,max(capacity) FILTER (where type = 'STORAGE_AMOUNT') as stor_capacity\n               ,max(current) FILTER (where type = 'STORAGE_PROVISIONED') as stor_provisioned\n               ,max(current) FILTER (where type = 'STORAGE_LATENCY') as latency_used\n               ,max(current) FILTER (where type = 'STORAGE_ACCESS') as iops_used\n          FROM metric\n         WHERE type in ('STORAGE_AMOUNT', 'STORAGE_PROVISIONED', 'STORAGE_LATENCY', 'STORAGE_ACCESS')\n           AND $__timeFilter(time)\n           AND consumed is null\n           and entity_type = 'STORAGE'\n         GROUP BY 1,2) as cluster_stats\n    group by 1\n)\n\n\n-- TODO: Update all of the column names below with the new names above\n\n\nselect SPLIT_PART(cluster_name, '/', 1) as \"Datacenter\",\n       SPLIT_PART(cluster_name, '/', 2) as \"Cluster Name\",\n       ds_name as \"Datastore Name\",\n       stor_capacity/1024 as \"Storage Capacity\",\n       stor_provisioned/1024 as \"Storage Provisioned\",\n       stor_used/1024 as \"Storage Used \",\n       latency_avg as \"Storage Latency Used\",\n       latency_max as \"Storage Latency Peak\",\n       iops_avg as \"Iops Used\",\n       iops_max as \"Iops Peak\"\n  from ds_stats\n  join ds_by_cluster on ds_stats.ds_oid = ds_by_cluster.ds_oid\n;\n",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "savings"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "completed_action",
          "timeColumn": "recommendation_time",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "title": "Datastore Performance and Latency (Visualization)",
      "type": "bargauge"
    },
    {
      "cards": {},
      "color": {
        "cardColor": "rgb(212, 255, 0)",
        "colorScale": "linear",
        "colorScheme": "interpolateCool",
        "exponent": 0.5,
        "mode": "opacity"
      },
      "dataFormat": "timeseries",
      "datasource": "Turbo Timescale",
      "gridPos": {
        "h": 18,
        "w": 12,
        "x": 12,
        "y": 53
      },
      "heatmap": {},
      "hideZeroBuckets": true,
      "highlightCards": true,
      "id": 34,
      "legend": {
        "show": true
      },
      "pluginVersion": "7.3.8",
      "reverseYBuckets": false,
      "targets": [
        {
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "WITH metrics AS (\n  SELECT m.time, m.current, m.type\n  FROM metric m,\n    scope_to($__timeFrom(), $__timeTo(), 'STORAGE', ARRAY[${Cluster:raw}+0]::bigint[], '${Cluster:raw}' = '0') as s\n  WHERE\n    m.entity_oid = s.oid\n    AND m.time BETWEEN s.from_time AND s.to_time\n    AND m.type IN ('STORAGE_ACCESS', 'STORAGE_LATENCY')\n    AND \"time\" BETWEEN $__timeFrom() AND $__timeTo()\n  GROUP BY m.time, m.entity_oid, m.current, m.type\n)\nSELECT\n  m.time,\n  avg(m.current) FILTER (WHERE m.type = 'STORAGE_ACCESS') AS \"IOPS Avg\",\n  avg(m.current) FILTER (WHERE m.type = 'STORAGE_LATENCY') AS \"Latency Avg\"\nFROM metrics m\nGROUP BY m.time\nORDER BY 1",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "savings"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "completed_action",
          "timeColumn": "recommendation_time",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "title": "Storage Access Heatmap",
      "tooltip": {
        "show": true,
        "showHistogram": true
      },
      "type": "heatmap",
      "xAxis": {
        "show": true
      },
      "yAxis": {
        "format": "short",
        "logBase": 1,
        "show": true
      },
      "yBucketBound": "auto"
    },
    {
      "datasource": "Turbo Timescale",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "custom": {
            "fillOpacity": 80,
            "gradientMode": "hue",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineWidth": 1
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "dark-yellow",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "Storage Capacity"
            },
            "properties": [
              {
                "id": "unit",
                "value": "decgbytes"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Storage Provisioned"
            },
            "properties": [
              {
                "id": "unit",
                "value": "decgbytes"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Storage Used "
            },
            "properties": [
              {
                "id": "unit",
                "value": "decgbytes"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Storage Latency Used"
            },
            "properties": [
              {
                "id": "unit",
                "value": "ms"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Storage Latency Peak"
            },
            "properties": [
              {
                "id": "unit",
                "value": "ms"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Iops Used"
            },
            "properties": [
              {
                "id": "unit",
                "value": "iops"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Iops Peak"
            },
            "properties": [
              {
                "id": "unit",
                "value": "iops"
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 12,
        "w": 12,
        "x": 0,
        "y": 71
      },
      "id": 45,
      "options": {
        "bucketOffset": 0,
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom"
        }
      },
      "pluginVersion": "8.0.6",
      "targets": [
        {
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "\n-- Datastore Stats Panel\nwith ds_by_cluster as (\n    SELECT DISTINCT ON (e.oid)\n        g.name as cluster_name,\n        g.oid as cluster_oid,\n        e.oid as ds_oid,\n        e.name as ds_name\n      FROM entity e\n      JOIN scope s1 ON (s1.seed_oid = e.oid)\n      JOIN entity g ON (g.oid = s1.scoped_oid)\n     WHERE e.type = 'STORAGE'\n       AND (s1.scoped_type = 'COMPUTE_CLUSTER')\n       AND (s1.scoped_oid in ($Cluster))\n       AND (e.first_seen, e.last_seen) OVERLAPS ($__timeFrom(), $__timeTo())\n       AND (s1.start, s1.finish) OVERLAPS ($__timeFrom(), $__timeTo())\n),\n\nds_stats as (\n     select ds_oid\n          ,avg(stor_used) as stor_used\n          ,avg(stor_used/stor_capacity) as stor_util\n          ,avg(stor_capacity) as stor_capacity\n          ,avg(stor_provisioned) as stor_provisioned\n    from\n        (SELECT entity_oid as ds_oid\n               ,time\n               ,max(current) FILTER (where type = 'STORAGE_AMOUNT') as stor_used\n               ,max(capacity) FILTER (where type = 'STORAGE_AMOUNT') as stor_capacity\n               ,max(current) FILTER (where type = 'STORAGE_PROVISIONED') as stor_provisioned\n          FROM metric\n         WHERE type in ('STORAGE_AMOUNT', 'STORAGE_PROVISIONED')\n           AND $__timeFilter(time)\n           AND consumed is null\n           and entity_type = 'STORAGE'\n         GROUP BY 1,2) as cluster_stats\n    group by 1\n)\n\n\n-- TODO: Update all of the column names below with the new names above\n\n\nselect SPLIT_PART(cluster_name, '/', 1) as \"Datacenter\",\n       SPLIT_PART(cluster_name, '/', 2) as \"Cluster Name\",\n       ds_name as \"Datastore Name\",\n       stor_capacity/1024 as \"Storage Capacity\",\n       stor_provisioned/1024 as \"Storage Provisioned\",\n       stor_used/1024 as \"Storage Used \"\n  from ds_stats\n  join ds_by_cluster on ds_stats.ds_oid = ds_by_cluster.ds_oid\n;\n",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "savings"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "completed_action",
          "timeColumn": "recommendation_time",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "title": "Datastore Capacity - Histogram",
      "type": "histogram"
    },
    {
      "datasource": "Turbo Timescale",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "continuous-BlPu"
          },
          "custom": {
            "fillOpacity": 91,
            "gradientMode": "hue",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineWidth": 1
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 12,
        "w": 12,
        "x": 12,
        "y": 71
      },
      "id": 44,
      "options": {
        "bucketOffset": 0,
        "combine": false,
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom"
        }
      },
      "pluginVersion": "8.0.6",
      "targets": [
        {
          "format": "time_series",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "WITH metrics AS (\n  SELECT m.time, m.current, m.type\n  FROM metric m,\n    scope_to($__timeFrom(), $__timeTo(), 'STORAGE', ARRAY[${Cluster:raw}+0]::bigint[], '${Cluster:raw}' = '0') as s\n  WHERE\n    m.entity_oid = s.oid\n    AND m.time BETWEEN s.from_time AND s.to_time\n    AND m.type IN ('STORAGE_ACCESS', 'STORAGE_LATENCY')\n    AND \"time\" BETWEEN $__timeFrom() AND $__timeTo()\n  GROUP BY m.time, m.entity_oid, m.current, m.type\n)\nSELECT\n  m.time,\n  avg(m.current) FILTER (WHERE m.type = 'STORAGE_ACCESS') AS \"IOPS Avg\",\n  avg(m.current) FILTER (WHERE m.type = 'STORAGE_LATENCY') AS \"Latency Avg\"\nFROM metrics m\nGROUP BY m.time\nORDER BY 1",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "savings"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "completed_action",
          "timeColumn": "recommendation_time",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "title": "Storage Access and Performance - Histogram",
      "type": "histogram"
    },
    {
      "datasource": "Turbo Timescale",
      "fieldConfig": {
        "defaults": {
          "displayName": "$__cell_0",
          "mappings": [],
          "max": 100,
          "thresholds": {
            "mode": "percentage",
            "steps": [
              {
                "color": "semi-dark-purple",
                "value": null
              },
              {
                "color": "red",
                "value": 85
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 7,
        "w": 24,
        "x": 0,
        "y": 83
      },
      "id": 36,
      "options": {
        "displayMode": "gradient",
        "orientation": "vertical",
        "reduceOptions": {
          "calcs": [
            "mean"
          ],
          "fields": "",
          "limit": 20,
          "values": true
        },
        "showUnfilled": true,
        "text": {}
      },
      "pluginVersion": "8.3.2",
      "targets": [
        {
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "\n-- Host Stats Panel\nwith pms_by_cluster as (\n    SELECT DISTINCT ON (e.oid)\n        g.name as cluster_name,\n        g.oid as cluster_oid,\n        e.oid as pm_oid,\n        e.name as pm_name\n      FROM entity e\n      JOIN scope s1 ON (s1.seed_oid = e.oid)\n      JOIN entity g ON (g.oid = s1.scoped_oid)\n     WHERE e.type = 'VIRTUAL_MACHINE'\n       AND (s1.scoped_type = 'COMPUTE_CLUSTER')\n       AND (s1.scoped_oid in ($Cluster))\n       AND (e.first_seen, e.last_seen) OVERLAPS ($__timeFrom(), $__timeTo())\n       AND (s1.start, s1.finish) OVERLAPS ($__timeFrom(), $__timeTo())\n),\n\npm_stats as (\n     select pm_oid\n          ,avg(cpu_used) as cpu_used_avg\n          ,max(cpu_used) as cpu_used_max\n          ,percentile_cont(.97) within group (order by cpu_used/cpu_capacity asc) cpu_util_percentile\n          ,avg(cpu_used/cpu_capacity) as cpu_util_avg\n          ,max(cpu_used/cpu_capacity) as cpu_util_max\n          ,avg(cpu_capacity) as cpu_capacity \n          ,avg(mem_used) as mem_used_avg\n          ,max(mem_used) as mem_used_max\n          ,percentile_cont(.97) within group (order by mem_used/mem_capacity asc) mem_util_percentile\n          ,avg(mem_used/mem_capacity) as mem_util_avg\n          ,max(mem_used/mem_capacity) as mem_util_max\n          ,avg(mem_capacity) as mem_capacity\n    from\n        (SELECT entity_oid as pm_oid\n               ,time\n               ,max(current) FILTER (where type = 'VCPU') as cpu_used\n               ,max(capacity)  FILTER (where type = 'VCPU') as cpu_capacity\n               ,max(current) FILTER (where type = 'VMEM') as mem_used\n               ,max(capacity)  FILTER (where type = 'VMEM') as mem_capacity\n          FROM metric\n         WHERE type in ('VCPU', 'VMEM')\n           AND $__timeFilter(time)\n           AND consumed is null\n           and entity_type = 'VIRTUAL_MACHINE'\n         GROUP BY 1,2) as cluster_stats\n    group by 1\n)\n\nselect pm_name as \"Virtual Machine Name\",\n       SPLIT_PART(cluster_name, '/', 1) as \"Datacenter\",\n       SPLIT_PART(cluster_name, '/', 2) as \"Cluster Name\",\n       cpu_capacity as \"CPU Capacity (MHz)\",\n       cpu_used_avg as \"CPU Avg Used (MHz)\",\n       cpu_used_max as \"CPU Max Used (MHz)\",\n       mem_capacity/1024/1024 as \"Mem Capacity (GB)\",\n       mem_used_avg/1024/1024 as \"Mem Avg Used (GB)\",\n       mem_used_max/1024/1024 as \"Mem Max Used (GB)\",\n       cpu_util_avg*100 as \"CPU Avg Util (%)\",\n       cpu_util_max*100 as \"CPU Max Util (%)\",\n       cpu_util_percentile*100 as \"CPU Percentile Util (%)\",\n       mem_util_avg*100 as \"Mem Avg Util (%)\",\n       mem_util_max*100 as \"Mem Max Util (%)\",\n       mem_util_percentile*100 as \"Mem Percentile Util (%)\"\n  from pm_stats\n  JOIN pms_by_cluster on pms_by_cluster.pm_oid = pm_stats.pm_oid\nwhere cpu_util_avg is not null\norder by cpu_util_avg desc\n;",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "savings"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "completed_action",
          "timeColumn": "recommendation_time",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "title": "Top 20 Most Consumed vCPU by Virtual Machine",
      "transformations": [
        {
          "id": "organize",
          "options": {
            "excludeByName": {
              "CPU Avg Used (MHz)": true,
              "CPU Capacity (MHz)": true,
              "CPU Max Used (MHz)": true,
              "CPU Max Util (%)": true,
              "CPU Percentile Util (%)": true,
              "Cluster Name": true,
              "Datacenter": true,
              "Mem Avg Used (GB)": true,
              "Mem Avg Util (%)": true,
              "Mem Capacity (GB)": true,
              "Mem Max Used (GB)": true,
              "Mem Max Util (%)": true,
              "Mem Percentile Util (%)": true
            },
            "indexByName": {},
            "renameByName": {}
          }
        }
      ],
      "transparent": true,
      "type": "bargauge"
    },
    {
      "datasource": "Turbo Timescale",
      "fieldConfig": {
        "defaults": {
          "displayName": "$__cell_0",
          "mappings": [],
          "max": 100,
          "thresholds": {
            "mode": "percentage",
            "steps": [
              {
                "color": "rgb(255, 160, 0)",
                "value": null
              },
              {
                "color": "red",
                "value": 85
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 7,
        "w": 24,
        "x": 0,
        "y": 90
      },
      "id": 37,
      "options": {
        "displayMode": "gradient",
        "orientation": "vertical",
        "reduceOptions": {
          "calcs": [
            "mean"
          ],
          "fields": "",
          "limit": 20,
          "values": true
        },
        "showUnfilled": true,
        "text": {}
      },
      "pluginVersion": "8.3.2",
      "targets": [
        {
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "\n-- Host Stats Panel\nwith pms_by_cluster as (\n    SELECT DISTINCT ON (e.oid)\n        g.name as cluster_name,\n        g.oid as cluster_oid,\n        e.oid as pm_oid,\n        e.name as pm_name\n      FROM entity e\n      JOIN scope s1 ON (s1.seed_oid = e.oid)\n      JOIN entity g ON (g.oid = s1.scoped_oid)\n     WHERE e.type = 'VIRTUAL_MACHINE'\n       AND (s1.scoped_type = 'COMPUTE_CLUSTER')\n       AND (s1.scoped_oid in ($Cluster))\n       AND (e.first_seen, e.last_seen) OVERLAPS ($__timeFrom(), $__timeTo())\n       AND (s1.start, s1.finish) OVERLAPS ($__timeFrom(), $__timeTo())\n),\n\npm_stats as (\n     select pm_oid\n          ,avg(cpu_used) as cpu_used_avg\n          ,max(cpu_used) as cpu_used_max\n          ,percentile_cont(.97) within group (order by cpu_used/cpu_capacity asc) cpu_util_percentile\n          ,avg(cpu_used/cpu_capacity) as cpu_util_avg\n          ,max(cpu_used/cpu_capacity) as cpu_util_max\n          ,avg(cpu_capacity) as cpu_capacity \n          ,avg(mem_used) as mem_used_avg\n          ,max(mem_used) as mem_used_max\n          ,percentile_cont(.97) within group (order by mem_used/mem_capacity asc) mem_util_percentile\n          ,avg(mem_used/mem_capacity) as mem_util_avg\n          ,max(mem_used/mem_capacity) as mem_util_max\n          ,avg(mem_capacity) as mem_capacity\n    from\n        (SELECT entity_oid as pm_oid\n               ,time\n               ,max(current) FILTER (where type = 'VCPU') as cpu_used\n               ,max(capacity)  FILTER (where type = 'VCPU') as cpu_capacity\n               ,max(current) FILTER (where type = 'VMEM') as mem_used\n               ,max(capacity)  FILTER (where type = 'VMEM') as mem_capacity\n          FROM metric\n         WHERE type in ('VCPU', 'VMEM')\n           AND $__timeFilter(time)\n           AND consumed is null\n           and entity_type = 'VIRTUAL_MACHINE'\n         GROUP BY 1,2) as cluster_stats\n    group by 1\n)\n\nselect pm_name as \"Virtual Machine Name\",\n       SPLIT_PART(cluster_name, '/', 1) as \"Datacenter\",\n       SPLIT_PART(cluster_name, '/', 2) as \"Cluster Name\",\n       cpu_capacity as \"CPU Capacity (MHz)\",\n       cpu_used_avg as \"CPU Avg Used (MHz)\",\n       cpu_used_max as \"CPU Max Used (MHz)\",\n       mem_capacity/1024/1024 as \"Mem Capacity (GB)\",\n       mem_used_avg/1024/1024 as \"Mem Avg Used (GB)\",\n       mem_used_max/1024/1024 as \"Mem Max Used (GB)\",\n       cpu_util_avg*100 as \"CPU Avg Util (%)\",\n       cpu_util_max*100 as \"CPU Max Util (%)\",\n       cpu_util_percentile*100 as \"CPU Percentile Util (%)\",\n       mem_util_avg*100 as \"Mem Avg Util (%)\",\n       mem_util_max*100 as \"Mem Max Util (%)\",\n       mem_util_percentile*100 as \"Mem Percentile Util (%)\"\n  from pm_stats\n  JOIN pms_by_cluster on pms_by_cluster.pm_oid = pm_stats.pm_oid\nwhere mem_util_avg is not null\norder by mem_util_avg desc\n;",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "savings"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "completed_action",
          "timeColumn": "recommendation_time",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "title": "Top 20 Most Consumed vMem by Virtual Machine",
      "transformations": [
        {
          "id": "organize",
          "options": {
            "excludeByName": {
              "CPU Avg Used (MHz)": true,
              "CPU Avg Util (%)": true,
              "CPU Capacity (MHz)": true,
              "CPU Max Used (MHz)": true,
              "CPU Max Util (%)": true,
              "CPU Percentile Util (%)": true,
              "Cluster Name": true,
              "Datacenter": true,
              "Mem Avg Used (GB)": true,
              "Mem Avg Util (%)": false,
              "Mem Capacity (GB)": true,
              "Mem Max Used (GB)": true,
              "Mem Max Util (%)": true,
              "Mem Percentile Util (%)": true
            },
            "indexByName": {},
            "renameByName": {}
          }
        }
      ],
      "transparent": true,
      "type": "bargauge"
    },
    {
      "datasource": "Turbo Timescale",
      "fieldConfig": {
        "defaults": {
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "rgb(255, 115, 221)",
                "value": null
              },
              {
                "color": "purple",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 3,
        "w": 24,
        "x": 0,
        "y": 97
      },
      "id": 42,
      "options": {
        "colorMode": "background",
        "graphMode": "none",
        "justifyMode": "auto",
        "orientation": "auto",
        "reduceOptions": {
          "calcs": [
            "mean"
          ],
          "fields": "",
          "values": false
        },
        "text": {},
        "textMode": "auto"
      },
      "pluginVersion": "8.3.2",
      "targets": [
        {
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "-- ! Old Quick Subract Query\n\n/*\nselect \n    count(distinct entity_oid) filter (where date_trunc('day', time) = date_trunc('day', $__timeFrom()::date)) as \"Previous VM Count\", count(distinct entity_oid) filter (where date_trunc('day', time) = date_trunc('day', $__timeTo()::date)) as \"Current VM Count\",\n    count(distinct entity_oid) filter (where date_trunc('day', time) = date_trunc('day', $__timeFrom()::date)) - count(distinct entity_oid) filter (where date_trunc('day', time) = date_trunc('day', $__timeTo()::date)) as \"Deleted VM Count\"\nfrom metric\njoin scope_to($__timeFrom(), $__timeTo(), 'VIRTUAL_MACHINE', ARRAY[$Cluster]::bigint[], false) s on s.oid = metric.entity_oid\n  where $__timeFilter(time)\n  AND entity_type = 'VIRTUAL_MACHINE'\n  AND time BETWEEN s.from_time AND s.to_time\n  AND type = 'STORAGE_AMOUNT'  */\n  \n  with monthly_vms as (\n    select date_trunc('hour', time) as current\n          ,entity_oid as vm_oid\n      FROM (\n        select time\n              ,entity_oid\n          from extractor.metric\n          join scope s on s.scoped_oid = entity_oid\n         WHERE entity_type = 'VIRTUAL_MACHINE'\n           AND type = 'STORAGE_PROVISIONED'\n           AND $__timeFilter(time)\n           and s.seed_oid in ($Cluster)\n           and (start, finish) overlaps ($__timeFrom(), $__timeTo())\n      ) as metric_data\n     GROUP BY 1, 2\n),\nadded_and_removed as (\n    SELECT COUNT(DISTINCT vm_oid) FILTER (where current = (select max(current) from monthly_vms)) as \"Virtual Machine Total Count\",\n           COUNT(DISTINCT vm_oid) FILTER (WHERE vm_oid NOT IN (SELECT DISTINCT vm_oid\n                                                                 FROM monthly_vms m2\n                                                               WHERE m2.current = (select min(current) from monthly_vms))) as \"Virtual Machines Added\"\n          ,COUNT(DISTINCT vm_oid) FILTER (WHERE vm_oid NOT IN (SELECT DISTINCT vm_oid\n                                                                 FROM monthly_vms m2\n                                                                WHERE m2.current = (select max(current) from monthly_vms))) as \"Virtual Machines Removed\"\n      FROM monthly_vms m1\n)\nselect * from added_and_removed\n",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "savings"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "completed_action",
          "timeColumn": "recommendation_time",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "title": "Scoped Virtual Machines Counter (within Timescale)",
      "transformations": [
        {
          "id": "filterByRefId",
          "options": {}
        },
        {
          "id": "calculateField",
          "options": {
            "alias": "Virtual Machine Delta",
            "binary": {
              "left": "Virtual Machines Added",
              "operator": "-",
              "reducer": "sum",
              "right": "Virtual Machines Removed"
            },
            "mode": "binary",
            "reduce": {
              "reducer": "sum"
            },
            "replaceFields": false
          }
        },
        {
          "id": "organize",
          "options": {
            "excludeByName": {},
            "indexByName": {
              "Virtual Machine Delta": 2,
              "Virtual Machine Total Count": 3,
              "Virtual Machines Added": 1,
              "Virtual Machines Removed": 0
            },
            "renameByName": {}
          }
        }
      ],
      "type": "stat"
    },
    {
      "datasource": "Turbo Timescale",
      "fieldConfig": {
        "defaults": {
          "custom": {
            "align": "auto",
            "displayMode": "auto",
            "filterable": true
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "percentunit"
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "CPU Capacity"
            },
            "properties": [
              {
                "id": "unit",
                "value": "hertz"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "CPU Used Max"
            },
            "properties": [
              {
                "id": "unit",
                "value": "hertz"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "CPU Used Avg"
            },
            "properties": [
              {
                "id": "unit",
                "value": "hertz"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "CPU Cores"
            },
            "properties": [
              {
                "id": "unit",
                "value": "none"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "CPU Cores (Cluster Aggregate)"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 251
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 11,
        "w": 24,
        "x": 0,
        "y": 100
      },
      "id": 2,
      "options": {
        "footer": {
          "fields": "",
          "reducer": [
            "sum"
          ],
          "show": false
        },
        "showHeader": true,
        "sortBy": [
          {
            "desc": true,
            "displayName": "CPU Cores"
          }
        ]
      },
      "pluginVersion": "8.3.2",
      "targets": [
        {
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "with hosts_by_cluster as (\n \tselect e.oid as pm_oid,\n \t\t   g.oid as cluster_oid,\n \t\t   g.name as cluster_name,\n \t\t   avg((e.attrs ->> 'num_cpus')::numeric) as cpus\n \tfrom entity as e\n \tjoin scope s on s.seed_oid = e.oid\n \tjoin entity g on g.oid = s.scoped_oid \n \twhere s.scoped_type = 'COMPUTE_CLUSTER'\n \tand e.type = 'PHYSICAL_MACHINE'\n \tand g.type = 'COMPUTE_CLUSTER'\n \tand (s.scoped_oid in ($Cluster))\n \tand (start, finish) OVERLAPS ($__timeFrom(), $__timeTo())\n \tand (e.first_seen, e.last_seen) OVERLAPS ($__timeFrom(), $__timeTo())\n \tand (e.first_seen, g.last_seen) OVERLAPS ($__timeFrom(), $__timeTo())\n group by 1,2,3\n ),\n \n pm_stats as (\n \tselect pm_oid,\n \t\t  AVG(cpu_used) as cpu_used,\n \t\t  MAX(cpu_used) as cpu_max,\n \t\t  percentile_cont(.01) WITHIN GROUP (ORDER BY cpu_used) as cpu_percentile_01,\n \t\t  percentile_cont(.95) WITHIN GROUP (ORDER BY cpu_used) as cpu_percentile_95,\n \t\t  percentile_cont(.97) WITHIN GROUP (ORDER BY cpu_used) as cpu_percentile_97,\n \t\t  avg(cpu_capacity) as cpu_capacity\n \tfrom \n\t \t(select entity_oid as pm_oid\n\t \t      ,current as cpu_used\n\t \t      ,capacity as cpu_capacity\n\t \t      ,time\n\t \t  from metric\n\t \t  where type = 'CPU'\n\t \t  and consumed is null\n\t \t  and $__timeFilter(time)\n\t \t ) as data\n\t group by 1\n )\n \n select cluster_name as \"Cluster Name\"\n       ,sum(cpus) as \"CPU Cores\"\n       ,avg(cpu_max)/nullif(avg(cpu_capacity),0) as \"CPU Util Max\"\n       ,avg(cpu_used)/nullif(avg(cpu_capacity),0) as \"CPU Util Avg\"\n       ,avg(cpu_percentile_01)/nullif(avg(cpu_capacity), 0) as \"CPU Util 1% Lows\"\n       ,avg(cpu_percentile_95)/nullif(avg(cpu_capacity), 0) as \"CPU Util 95%\"\n       ,avg(cpu_percentile_97)/nullif(avg(cpu_capacity), 0) as \"CPU Util 97%\"\n       ,sum(cpu_capacity)*1000 as \"CPU Capacity\"\n       ,sum(cpu_max)*1000 as \"CPU Used Max\"\n       ,sum(cpu_used)*1000 as \"CPU Used Avg\"\n   from hosts_by_cluster, pm_stats\n   where pm_stats.pm_oid = hosts_by_cluster.pm_oid\n   group by 1\n        ",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "savings"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "completed_action",
          "timeColumn": "recommendation_time",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "title": "Cluster Compute (CPU) Utilization",
      "type": "table"
    },
    {
      "datasource": "Turbo Timescale",
      "fieldConfig": {
        "defaults": {
          "custom": {
            "align": "auto",
            "displayMode": "auto",
            "filterable": true
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "Host Name"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 298
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "CPU Architecture / SKU"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 329
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 10,
        "w": 24,
        "x": 0,
        "y": 111
      },
      "id": 10,
      "options": {
        "footer": {
          "fields": "",
          "reducer": [
            "sum"
          ],
          "show": false
        },
        "showHeader": true,
        "sortBy": [
          {
            "desc": false,
            "displayName": "CPU Cores"
          }
        ]
      },
      "pluginVersion": "8.3.2",
      "targets": [
        {
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "-- Host Stats Panel\nwith pms_by_cluster as (\n    SELECT DISTINCT ON (e.oid)\n        g.name as cluster_name,\n        g.oid as cluster_oid,\n        e.oid as pm_oid,\n        e.name as pm_name,\n        (e.attrs ->> 'num_cpus')::numeric as cpus,\n        (e.attrs ->> 'model') as hostmodel,\n        (e.attrs ->> 'cpu_model') as h_cpu_model\n      FROM entity e\n      JOIN scope s1 ON (s1.seed_oid = e.oid)\n      JOIN entity g ON (g.oid = s1.scoped_oid)\n     WHERE e.type = 'PHYSICAL_MACHINE'\n       AND (s1.scoped_type = 'COMPUTE_CLUSTER')\n       AND (s1.scoped_oid in ($Cluster))\n       AND (e.first_seen, e.last_seen) OVERLAPS ($__timeFrom(), $__timeTo())\n       AND (s1.start, s1.finish) OVERLAPS ($__timeFrom(), $__timeTo())\n),\n\npm_stats as (\n     select pm_oid\n          ,avg(cpu_used) as cpu_used_avg\n          ,max(cpu_used) as cpu_used_max\n          ,percentile_cont(.97) within group (order by cpu_used/cpu_capacity asc) cpu_util_percentile\n          ,avg(cpu_used/cpu_capacity) as cpu_util_avg\n          ,max(cpu_used/cpu_capacity) as cpu_util_max\n          ,avg(cpu_capacity) as cpu_capacity \n          ,avg(mem_used) as mem_used_avg\n          ,max(mem_used) as mem_used_max\n          ,percentile_cont(.97) within group (order by mem_used/mem_capacity asc) mem_util_percentile\n          ,avg(mem_used/mem_capacity) as mem_util_avg\n          ,max(mem_used/mem_capacity) as mem_util_max\n          ,avg(mem_capacity) as mem_capacity\n    from\n        (SELECT entity_oid as pm_oid\n               ,time\n               ,max(current) FILTER (where type = 'CPU') as cpu_used\n               ,max(capacity)  FILTER (where type = 'CPU') as cpu_capacity\n               ,max(current) FILTER (where type = 'MEM') as mem_used\n               ,max(capacity)  FILTER (where type = 'MEM') as mem_capacity\n          FROM metric\n         WHERE type in ('CPU', 'MEM')\n           AND $__timeFilter(time)\n           AND consumed is null\n           and entity_type = 'PHYSICAL_MACHINE'\n         GROUP BY 1,2) as cluster_stats\n    group by 1\n)\n\nselect SPLIT_PART(cluster_name, '/', 1) as \"Datacenter\",\n       SPLIT_PART(cluster_name, '/', 2) as \"Cluster Name\",\n       pm_name as \"Host Name\",\n       hostmodel as \"Host Model\",\n       h_cpu_model as \"CPU Architecture / SKU\",\n       cpus as \"CPU Cores\",\n       cpu_capacity as \"CPU Capacity (MHz)\",\n       cpu_used_avg as \"CPU Avg Used (MHz)\",\n       cpu_used_max as \"CPU Max Used (MHz)\",\n       mem_capacity/1024/1024 as \"Mem Capacity (GB)\",\n       mem_used_avg/1024/1024 as \"Mem Avg Used (GB)\",\n       mem_used_max/1024/1024 as \"Mem Max Used (GB)\",\n       cpu_util_avg*100 as \"CPU Avg Util (%)\",\n       cpu_util_max*100 as \"CPU Max Util (%)\",\n       cpu_util_percentile*100 as \"CPU Percentile Util (%)\",\n       mem_util_avg*100 as \"Mem Avg Util (%)\",\n       mem_util_max*100 as \"Mem Max Util (%)\",\n       mem_util_percentile*100 as \"Mem Percentile Util (%)\"\n  from pm_stats\n  JOIN pms_by_cluster on pms_by_cluster.pm_oid = pm_stats.pm_oid\n;",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "savings"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "completed_action",
          "timeColumn": "recommendation_time",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "title": "Host Utilization (Compute)",
      "transparent": true,
      "type": "table"
    },
    {
      "datasource": "Turbo Timescale",
      "fieldConfig": {
        "defaults": {
          "custom": {
            "align": "auto",
            "displayMode": "auto",
            "filterable": true,
            "minWidth": 150
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "Iops Used"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 235
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Iops Peak"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 223
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Storage Provisioned (GB)"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 260
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Storage Capacity (GB)"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 281
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Storage Used (GB)"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 277
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Storage Latency Used"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 266
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Storage Latency Peak"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 258
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Datastore Name"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 294
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Cluster Name"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 794
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Datacenter"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 978
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 11,
        "w": 24,
        "x": 0,
        "y": 121
      },
      "id": 32,
      "options": {
        "footer": {
          "fields": "",
          "reducer": [
            "sum"
          ],
          "show": false
        },
        "showHeader": true,
        "sortBy": [
          {
            "desc": false,
            "displayName": "Datastore Name"
          }
        ]
      },
      "pluginVersion": "8.3.2",
      "targets": [
        {
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "\n-- Datastore Stats Panel\nwith ds_by_cluster as (\n    SELECT DISTINCT ON (e.oid)\n        g.name as cluster_name,\n        g.oid as cluster_oid,\n        e.oid as ds_oid,\n        e.name as ds_name\n      FROM entity e\n      JOIN scope s1 ON (s1.seed_oid = e.oid)\n      JOIN entity g ON (g.oid = s1.scoped_oid)\n     WHERE e.type = 'STORAGE'\n       AND (s1.scoped_type = 'COMPUTE_CLUSTER')\n       AND (s1.scoped_oid in ($Cluster))\n       AND (e.first_seen, e.last_seen) OVERLAPS ($__timeFrom(), $__timeTo())\n       AND (s1.start, s1.finish) OVERLAPS ($__timeFrom(), $__timeTo())\n),\n\nds_stats as (\n     select ds_oid\n          ,avg(stor_used) as stor_used\n          ,avg(stor_used/stor_capacity) as stor_util\n          ,avg(stor_capacity) as stor_capacity\n          ,avg(stor_provisioned) as stor_provisioned\n          ,avg(iops_used) as iops_avg\n          ,max(iops_used) as iops_max\n          ,avg(latency_used) as latency_avg\n          ,max(latency_used) as latency_max\n    from\n        (SELECT entity_oid as ds_oid\n               ,time\n               ,max(current) FILTER (where type = 'STORAGE_AMOUNT') as stor_used\n               ,max(capacity) FILTER (where type = 'STORAGE_AMOUNT') as stor_capacity\n               ,max(current) FILTER (where type = 'STORAGE_PROVISIONED') as stor_provisioned\n               ,max(current) FILTER (where type = 'STORAGE_LATENCY') as latency_used\n               ,max(current) FILTER (where type = 'STORAGE_ACCESS') as iops_used\n          FROM metric\n         WHERE type in ('STORAGE_AMOUNT', 'STORAGE_PROVISIONED', 'STORAGE_LATENCY', 'STORAGE_ACCESS')\n           AND $__timeFilter(time)\n           AND consumed is null\n           and entity_type = 'STORAGE'\n         GROUP BY 1,2) as cluster_stats\n    group by 1\n)\n\n\n-- TODO: Update all of the column names below with the new names above\n\n\nselect SPLIT_PART(cluster_name, '/', 1) as \"Datacenter\",\n       SPLIT_PART(cluster_name, '/', 2) as \"Cluster Name\",\n       ds_name as \"Datastore Name\",\n       stor_provisioned/1024 as \"Storage Provisioned (GB)\",\n       stor_capacity/1024 as \"Storage Capacity (GB)\",\n       stor_used/1024 as \"Storage Used (GB)\",\n       latency_avg as \"Storage Latency Used\",\n       latency_max as \"Storage Latency Peak\",\n       iops_avg as \"Iops Used\",\n       iops_max as \"Iops Peak\"\n  from ds_stats\n  join ds_by_cluster on ds_stats.ds_oid = ds_by_cluster.ds_oid\n;\n",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "savings"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "completed_action",
          "timeColumn": "recommendation_time",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "title": "Datastore Performance and Latency (Text)",
      "transparent": true,
      "type": "table"
    },
    {
      "datasource": "Turbo Timescale",
      "fieldConfig": {
        "defaults": {
          "custom": {
            "align": "auto",
            "displayMode": "auto",
            "filterable": true
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "Host Name"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 267
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "VM Name"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 323
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Datacenter"
            },
            "properties": [
              {
                "id": "custom.width"
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 10,
        "w": 24,
        "x": 0,
        "y": 132
      },
      "id": 35,
      "options": {
        "footer": {
          "fields": "",
          "reducer": [
            "sum"
          ],
          "show": false
        },
        "showHeader": true,
        "sortBy": [
          {
            "desc": true,
            "displayName": "CPU Avg Used (MHz)"
          }
        ]
      },
      "pluginVersion": "8.3.2",
      "targets": [
        {
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "\n-- Host Stats Panel\nwith pms_by_cluster as (\n    SELECT DISTINCT ON (e.oid)\n        g.name as cluster_name,\n        g.oid as cluster_oid,\n        e.oid as pm_oid,\n        e.name as pm_name\n      FROM entity e\n      JOIN scope s1 ON (s1.seed_oid = e.oid)\n      JOIN entity g ON (g.oid = s1.scoped_oid)\n     WHERE e.type = 'VIRTUAL_MACHINE'\n       AND (s1.scoped_type = 'COMPUTE_CLUSTER')\n       AND (s1.scoped_oid in ($Cluster))\n       AND (e.first_seen, e.last_seen) OVERLAPS ($__timeFrom(), $__timeTo())\n       AND (s1.start, s1.finish) OVERLAPS ($__timeFrom(), $__timeTo())\n),\n\npm_stats as (\n     select pm_oid\n          ,avg(cpu_used) as cpu_used_avg\n          ,max(cpu_used) as cpu_used_max\n          ,percentile_cont(.97) within group (order by cpu_used/cpu_capacity asc) cpu_util_percentile\n          ,avg(cpu_used/cpu_capacity) as cpu_util_avg\n          ,max(cpu_used/cpu_capacity) as cpu_util_max\n          ,avg(cpu_capacity) as cpu_capacity \n          ,avg(mem_used) as mem_used_avg\n          ,max(mem_used) as mem_used_max\n          ,percentile_cont(.97) within group (order by mem_used/mem_capacity asc) mem_util_percentile\n          ,avg(mem_used/mem_capacity) as mem_util_avg\n          ,max(mem_used/mem_capacity) as mem_util_max\n          ,avg(mem_capacity) as mem_capacity\n    from\n        (SELECT entity_oid as pm_oid\n               ,time\n               ,max(current) FILTER (where type = 'VCPU') as cpu_used\n               ,max(capacity)  FILTER (where type = 'VCPU') as cpu_capacity\n               ,max(current) FILTER (where type = 'VMEM') as mem_used\n               ,max(capacity)  FILTER (where type = 'VMEM') as mem_capacity\n          FROM metric\n         WHERE type in ('VCPU', 'VMEM')\n           AND $__timeFilter(time)\n           AND consumed is null\n           and entity_type = 'VIRTUAL_MACHINE'\n         GROUP BY 1,2) as cluster_stats\n    group by 1\n)\n\nselect pm_name as \"Virtual Machine Name\",\n       SPLIT_PART(cluster_name, '/', 1) as \"Datacenter\",\n       SPLIT_PART(cluster_name, '/', 2) as \"Cluster Name\",\n       cpu_capacity as \"CPU Capacity (MHz)\",\n       cpu_used_avg as \"CPU Avg Used (MHz)\",\n       cpu_used_max as \"CPU Max Used (MHz)\",\n       mem_capacity/1024/1024 as \"Mem Capacity (GB)\",\n       mem_used_avg/1024/1024 as \"Mem Avg Used (GB)\",\n       mem_used_max/1024/1024 as \"Mem Max Used (GB)\",\n       cpu_util_avg*100 as \"CPU Avg Util (%)\",\n       cpu_util_max*100 as \"CPU Max Util (%)\",\n       cpu_util_percentile*100 as \"CPU Percentile Util (%)\",\n       mem_util_avg*100 as \"Mem Avg Util (%)\",\n       mem_util_max*100 as \"Mem Max Util (%)\",\n       mem_util_percentile*100 as \"Mem Percentile Util (%)\"\n  from pm_stats\n  JOIN pms_by_cluster on pms_by_cluster.pm_oid = pm_stats.pm_oid\n;",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "savings"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "completed_action",
          "timeColumn": "recommendation_time",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "title": "Virtual Machine Utilization",
      "transparent": true,
      "type": "table"
    }
  ],
  "refresh": "",
  "schemaVersion": 33,
  "style": "dark",
  "tags": [],
  "templating": {
    "list": [
      {
        "current": {
          "selected": true,
          "text": [
            "All"
          ],
          "value": [
            "$__all"
          ]
        },
        "datasource": "Turbo Timescale",
        "definition": "SELECT DISTINCT name as __text\n             ,oid as __value\n   FROM entity\n WHERE type = 'DATACENTER'\nAND (first_seen, last_seen) overlaps ($__timeFrom(), $__timeTo())\nORDER BY 1",
        "hide": 0,
        "includeAll": true,
        "multi": true,
        "name": "Datacenter",
        "options": [],
        "query": "SELECT DISTINCT name as __text\n             ,oid as __value\n   FROM entity\n WHERE type = 'DATACENTER'\nAND (first_seen, last_seen) overlaps ($__timeFrom(), $__timeTo())\nORDER BY 1",
        "refresh": 2,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "tagValuesQuery": "",
        "tagsQuery": "",
        "type": "query",
        "useTags": false
      },
      {
        "current": {
          "selected": false,
          "text": "All",
          "value": "$__all"
        },
        "datasource": "Turbo Timescale",
        "definition": "SELECT DISTINCT name as __text\n            ,oid as __value\n   FROM entity e\n   JOIN scope s on s.seed_oid = e.oid\n WHERE e.type = 'COMPUTE_CLUSTER'\n  AND (e.first_seen, e.last_seen) overlaps ($__timeFrom(), $__timeTo())\n  and s.scoped_type = 'DATACENTER'\n  and s.scoped_oid in ($Datacenter)",
        "hide": 0,
        "includeAll": true,
        "multi": true,
        "name": "Cluster",
        "options": [],
        "query": "SELECT DISTINCT name as __text\n            ,oid as __value\n   FROM entity e\n   JOIN scope s on s.seed_oid = e.oid\n WHERE e.type = 'COMPUTE_CLUSTER'\n  AND (e.first_seen, e.last_seen) overlaps ($__timeFrom(), $__timeTo())\n  and s.scoped_type = 'DATACENTER'\n  and s.scoped_oid in ($Datacenter)",
        "refresh": 2,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "tagValuesQuery": "",
        "tagsQuery": "",
        "type": "query",
        "useTags": false
      }
    ]
  },
  "time": {
    "from": "now-6h",
    "to": "now"
  },
  "timepicker": {
    "refresh_intervals": [
      "5s",
      "10s",
      "30s",
      "1m",
      "5m",
      "15m",
      "30m",
      "1h",
      "2h",
      "1d"
    ]
  },
  "timezone": "",
  "title": "Ultimate Cluster and Datacenter Utilization",
  "uid": "mj8iM2v7k",
  "version": 21,
  "weekStart": ""
}